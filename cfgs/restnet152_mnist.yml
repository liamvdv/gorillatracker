# Device Arguments

accelerator: cuda               # Device accelerator (e.g., "cuda" for GPU)
num_devices: 1                  # Number of devices (GPUs) to use
distributed_strategy: "auto"    # Distributed training strategy (if applicable)
force_deterministic: False      # Force deterministic behavior
precision: 32                   # Training precision (e.g., "bf16-mixed")
compile: False                  # Compile the model for faster execution
workers: 4                      # Number of workers for data loading


# Model and Training Arguments

project_name: "Embedding-ResNet152-MNIST-ClosedSet" # WandB project name
run_name: "mnist-resize-32x32"                     # Name for this training run
wandb_tags: ["test"]            # WandB tags for experiment tracking
model_name_or_path: "ResNet152" # Model name or path 
saved_checkpoint_path: Null     # Path to a saved model checkpoint (if resuming)
resume: False                   # Resume training from a saved checkpoint can also be a wandb path (wandb:model_id:tag)
fast_dev_run: False             # Enable fast development run
profiler: Null                  # Profiler to use (e.g., "simple", "advanced", "pytorch")
offline: False                  # Enable offline mode for WandB
data_preprocessing_only: False  # Run only data preprocessing
seed: 42                        # Random seed for reproducibility
debug: False                    # Enable debug mode
from_scratch: False             # Train the model from scratch
early_stopping_patience: 3      # Early stopping patience (number of epochs)
embedding_size: 128
dropout_p: 0.32

weight_decay: 0.2               # Weight decay
beta1: 0.9                      # Adam optimizer's beta1 parameter
beta2: 0.999                    # Adam optimizer's beta2 parameter
epsilon: 1e-7                   # Adam optimizer's epsilon

# L2SP Arguments
l2_alpha: 0.1                       # Alpha for the l2sp loss
l2_beta: 0.01                       # Beta for the l2sp loss
path_to_pretrained_weights: ""    # Path to the pretrained weights for the l2sp loss

margin: 1.0                   # Margin for the contrastive loss (triplet loss)
s: 64.0                         # Scale for the softmax losses 
delta_t: 50                    # Delta t for the vpl loss
mem_bank_start_epoch: 10         # Epoch to start using the memory bank
lambda_membank: 0.5            # Lambda for the memory bank loss
loss_mode: "offline/native"        # Loss modes are "offline", "offline/native", "online/soft", "online/semi-hard", "online/hard", "softmax/arcface" and "softmax/vpl"


lr_schedule: "constant"           # Learning rate schedule (e.g., "linear", "cosine", "exponential", "reduce_on_plateau") TODO: add 
warmup_mode: "constant"           # Warmup mode (e.g., "linear", "cosine", "exponential", "constant")
warmup_epochs: 0                # Number of warmup epochs (if 0 no warmup is performed)
initial_lr: 1e-5                # Initial learning rate before warmup(must be > 0.0)
start_lr: 1e-5                  # Learning Rate after warmup at the beginning of 'normal' scheduling
end_lr: 1e-5                    # End learning rate (for the learning rate schedule -> cosine learning rate schedule)


batch_size: 1024                # Training batch size
grad_clip: 1.0                  # Gradient clipping value
gradient_accumulation_steps: 4  # Gradient accumulation steps
max_epochs: 5                   # Training goal (large number)
val_before_training: True       # Perform validation before training
only_val: False                 # Perform only validation
kfold: False                     # Perform kfold cross validation

save_interval: 2                # Model checkpoint save interval as a fraction of total steps
embedding_save_interval: 2      # Embedding save interval

# Config and Data Arguments
# wandb_tags: ["research-template"] # WandB tags for experiment tracking

data_dir: "./mnist"
dataset_class: "gorillatracker.datasets.mnist.MNISTDataset"
data_resize_transform: 32